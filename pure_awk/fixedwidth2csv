#!/bin/sh
# vim: syntax=awk
i=1; for arg in "$@"; do export "ARGV$i=$arg" && i=$((i + 1)); done; export "ARGC=$((i - 1))";
exec awk "$(sed '1,4d' "$0")" # https://stackoverflow.com/a/59330239

BEGIN {
	args_len = ENVIRON["ARGC"]
	if (args_len == 0) {
		print help_text()
		exit 0
	}

	for (i = 1; i <= args_len; i++) {
		args[i] = ENVIRON["ARGV" i]
	}

	columns_len = parse_args(args, args_len, parsed)
	if (columns_len == 0) {
		print "At least one column name must be specified."
		exit 1
	}

	OFS = parsed["delimiter"] ? parsed["delimiter"] : ","
	column_regex = "[[:space:]]*"
	for (i = 1; i < columns_len; i++) {
		column_regex = column_regex parsed["columns", i] "[[:space:]]+"
	}

	column_regex = column_regex parsed["columns", columns_len] "[[:space:]]*"
}


{
	if ($0 ~ column_regex) {
		field_widths_len = get_field_widths($0, field_widths)
	}

	chars_len = split($0, chars, "")
	fields_idx = 1
	current_field = ""
	for (i = 1; i <= chars_len; i++) {
		current_field = current_field chars[i]
		if (length(current_field) == field_widths[fields_idx]) {
			fields[fields_idx++] = current_field
			current_field = ""
		}

	}

  #Last field won't ever match a length because of the sentinel value. We add it here.
	fields[fields_idx] = current_field
	for (i = 1; i <= fields_idx; i++) {
		gsub(/$[[:space:]]+/, "", fields[i])
		gsub(/[[:space:]]+$/, "", fields[i])
	}

	for (i = 1; i < fields_idx; i++) {
		printf "%s%s", fields[i], OFS
	}

	print fields[fields_idx]
}



function get_field_widths(line, result)
{
	chars_len = split(line, chars, "")
	on_whitespace = 0
	current_field_size = 0
	field_widths_idx = 1
	for (i = 1; i <= chars_len; i++) {
		if (chars[i] == " " && on_whitespace == 0) {
			on_whitespace = 1
			current_field_size++
		} else if (chars[i] == " " && on_whitespace == 1) {
			current_field_size++
		} else if (chars[i] != " " && on_whitespace == 0) {
			current_field_size++
		} else if (chars[i] != " " && on_whitespace == 1) {
			result[field_widths_idx++] = current_field_size
			current_field_size = 1
			on_whitespace = 0
		}

	}

	#Sentinel value as we dont care about the length of the last field. Just consume
	#the rest of the line.
	result[field_widths_idx] = -1
	return field_widths_idx
}


function help_text()
{
	print "fixedwidth2csv                                                                 "
	print "                                                                               "
	print "Given n fixedwidth tables in STDIN, each with a header, turn each table into   "
	print "its CSV equivalent.                                                            "
	print "                                                                               "
	print "For example, given:                                                            "
	print "                                                                               "
	print "cat << EOF | fixedwidth2csv -d '|' -c 'country' -c 'district' -c 'city'        "
	print "country       district city                                                    "
	print "United States New York New York                                                "
	print "Canada        Ontario  Toronto                                                 "
	print "                                                                               "
	print "country district      city                                                     "
	print "France  \303\216le-de-France Paris                                             "
	print "Spain   Madrid        Madrid                                                   "
	print "EOF                                                                            "
	print "                                                                               "
	print "we get,                                                                        "
	print "                                                                               "
	print "country|district|city                                                          "
	print "United States|New York|New York                                                "
	print "Canada|Ontario|Toronto                                                         "
	print "                                                                               "
	print "country|district|city                                                          "
	print "France|\303\216le-de-France|Paris                                              "
	print "Spain|Madrid|Madrid                                                            "
	print ".                                                                              "
	print "                                                                               "
	print "Note that `gawk` provides FIXEDWIDTH, but you need to know the width of the    "
	print "columns ahead of time [or calculate it on the fly]. This program does that for "
	print "you.                                                                           "
	print "                                                                               "
	print "Options:                                                                       "
	print "  -d Delimiter string to insert. Default is a comma.                           "
	print "  -c Column name to match on. You may pass multiple column names to reduce     "
	print "     risk of false positives.  THE ORDER OF COLUMN NAMES MATTERS. For example, "
	print "     given the table above, -c country -c district would match, but x          "
	print "     -c district -c country would not.                                         "
	print "  -h Print this help text.                                                     "
}


function parse_args(args, args_len, result)
{
	DELIMITER = 1
	COLUMN_NAME = 2
	NONE = 3
	column_num = 1
	for (i = 1; i <= args_len; i++) {
		if (args[i] == "-h" || args[i] == "--help") {
			print help_text()
			exit 0
		}

		if (args[i] == "-d") {
			context = DELIMITER
		} else if (args[i] == "-c") {
			context = COLUMN_NAME
		} else if (context == DELIMITER) {
			result["delimiter"] = args[i]
			context = NONE
		} else if (context == COLUMN_NAME) {
			result["columns", column_num++] = args[i]
			context = NONE
		} else {
		}

	}

	return (column_num - 1)
}

